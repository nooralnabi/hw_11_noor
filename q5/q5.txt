when an http/https comes to the web server at port 80 


1- The web server creates/uses a thread to handle the request, and it gets back to listening
2- The new thread will parse/ understand the request, and start processin
3- Thread will realize this is a resource that is handled by the application server (if the resource is registered with application server), 
and hands the request to the application server on the port it is listening on (e.g.8080)
4- Application server will hand the request to a new/existing thread
5- The new thread will parse/understand the request, and start processing
6- Thread will initialize all resources that your application will use such as database connections, mail server connections, etc.
7- Thread will determine which method to call inside your code based on the request, and it will package the parameters as call parameters to the method
8- your code will process the the business logic inside the method
9- you will have to connect to the database to save data, for example, and you will use the same resources initialized for you
10- your data, as wll as the commands for the database will be converted from your specific language (ruby for example) to a language (text) that your OS understands (marshalling)
11- your OS will take the information from the application server port, reads where it needs to go, then puts it through the port of the destination (database in this case)
12- Database will convert the information that came through to a language it understands (SQL) (unmarshalling)
13- Database thread will execute the statement, then returns an answer to the OS in a format that OS will understand (marshalling)
14- OS will take the information and places it through the port of the application server thread
15- Thread unmarshalls the information back binto Ruby, and sends the result back to the calling method in your code
16- Thread will create an HTML/CSS/JavaScript page that will include the result of processing your business logic
17- Thread will apply some compression, combination, and packing of code before sending back to the web server's calling thread as an HTTP/HTTPS response
18- The web server's calling thread will send the information back to the calling client